/*! ErudaV2 Mobile+ v3.0 â€” ErudaV2 by Rex (mobile-first bottom drawer, draggable gear, improved network capture) */
(function(){
  if(window.__erudaV2_mobile_v3_loaded) { console.log('ErudaV2 Mobile v3 already loaded'); return; }
  window.__erudaV2_mobile_v3_loaded = true;
  const ID = { panel: 'erudav2v3-panel', gear: 'erudav2v3-gear', style: 'erudav2v3-style' };
  const CSS = "" +
  ":root{--panel:#07101a;--muted:#9aa6b2;--accent:#1f8fff;--text:#e6eef6}" +
  "#" + ID.panel + "{position:fixed;left:0;right:0;bottom:0;height:56vh;max-height:90vh;z-index:2147483647;display:flex;flex-direction:column;background:var(--panel);color:var(--text);font-family:Inter,system-ui,Arial,sans-serif;border-top-left-radius:12px;border-top-right-radius:12px;box-shadow:0 -12px 40px rgba(0,0,0,.6);transform:translateY(100%);transition:transform .26s cubic-bezier(.2,.9,.3,1);touch-action:pan-y;}" +
  "#" + ID.panel + ".open{transform:translateY(0);}" +
  "#" + ID.panel + " .header{display:flex;align-items:center;justify-content:space-between;padding:8px 12px;border-bottom:1px solid rgba(255,255,255,.03)}" +
  "#" + ID.panel + " .tabs{display:flex;gap:6px;overflow:auto}" +
  "#" + ID.panel + " .tabs button{background:transparent;border:0;color:var(--muted);padding:8px 12px;border-radius:8px;font-weight:600;white-space:nowrap;flex:0 0 auto}" +
  "#" + ID.panel + " .tabs button.active{color:var(--text);background:rgba(255,255,255,0.02)}" +
  "#" + ID.panel + " .body{flex:1;overflow:auto;padding:10px;-webkit-overflow-scrolling:touch}" +
  "#" + ID.panel + " .footer{padding:8px;text-align:right;border-top:1px solid rgba(255,255,255,.03);font-size:12px;color:var(--muted)}" +
  "#" + ID.panel + " .panel{display:none}" +
  "#" + ID.panel + " .panel.active{display:block}" +
  "#" + ID.panel + " .log{height:36vh;overflow:auto;background:linear-gradient(180deg,#071018,#061018);padding:8px;border-radius:8px;font-family:ui-monospace,monospace;font-size:13px}" +
  "#" + ID.panel + " .log .line{padding:4px 6px;border-radius:6px;margin-bottom:4px}" +
  "#" + ID.panel + " .controls{display:flex;gap:8px;margin-top:8px}" +
  "#" + ID.panel + " input[type=text],#" + ID.panel + " textarea{background:rgba(255,255,255,0.02);border:1px solid rgba(255,255,255,0.03);color:var(--text);padding:8px;border-radius:8px}" +
  "#" + ID.panel + " .list{background:rgba(255,255,255,0.02);padding:8px;border-radius:8px;max-height:42vh;overflow:auto}" +
  "#" + ID.panel + " .row{padding:8px;border-bottom:1px dashed rgba(255,255,255,0.03);font-family:ui-monospace,monospace;font-size:13px}" +
  "#" + ID.gear + "{position:fixed;right:14px;bottom:14px;z-index:2147483648;width:48px;height:48px;border-radius:50%;display:flex;align-items:center;justify-content:center;background:var(--accent);box-shadow:0 10px 30px rgba(0,0,0,.35);cursor:pointer;touch-action:none}" +
  "#" + ID.gear + " svg{width:24px;height:24px;display:block}" +
  "@media(min-width:720px){ #" + ID.panel + "{left:auto;right:12px;bottom:12px;height:80vh;width:560px;border-radius:12px} }";
  if(!document.getElementById(ID.style)){ const s=document.createElement('style'); s.id=ID.style; s.appendChild(document.createTextNode(CSS)); (document.head||document.documentElement).appendChild(s); }
  const Recorder = (function(){ const recs=[]; const listeners={add:[],clear:[]}; function notify(ev,data){ (listeners[ev]||[]).forEach(fn=>{ try{ fn(data); }catch(e){} }); } return { add:function(r){ recs.unshift(r); notify('add', r); }, clear:function(){ recs.length=0; notify('clear'); }, all:function(){ return recs.slice(); }, on:function(ev,fn){ if(!listeners[ev]) listeners[ev]=[]; listeners[ev].push(fn);} }; })();
  function now(){ return (new Date()).toISOString(); }
  function gen(prefix){ return prefix + '_' + Math.random().toString(36).slice(2,9); }
  (function(){ try{ const NativeXHR = window.XMLHttpRequest; function Hooked(){ const xhr = new NativeXHR(); const id = gen('xhr'); let method='', url=''; let start=0; const headers={}; const _open=xhr.open; xhr.open=function(m,u){ method=m; url=u; return _open.apply(xhr,arguments); }; const _set=xhr.setRequestHeader; xhr.setRequestHeader=function(k,v){ try{ headers[k]=v;}catch(e){} return _set.apply(xhr,arguments); }; const _send=xhr.send; xhr.send=function(body){ start=Date.now(); try{ Recorder.add({ id, type:'xhr', method, url, startedDateTime: now(), request:{ headers, body } }); }catch(e){} return _send.apply(xhr,arguments); }; xhr.addEventListener('readystatechange', function(){ try{ if(xhr.readyState===4){ Recorder.add({ id, type:'xhr', method, url, status:xhr.status, duration:Date.now()-start, response:{ body:(xhr.responseType===''||xhr.responseType==='text')?xhr.responseText:'[binary]' } }); } }catch(e){} }); return xhr; } window.XMLHttpRequest = Hooked; }catch(e){ console.warn('XHR hook failed', e); } })();
  (function(){ try{ const nativeFetch = window.fetch.bind(window); window.fetch = function(resource, init){ const id = gen('fetch'); const method = (init && init.method) || 'GET'; const url = (typeof resource==='string')?resource:(resource && resource.url)||''; const start = Date.now(); const body = (init && init.body) || null; Recorder.add({ id, type:'fetch', method, url, startedDateTime: now(), request:{ headers:(init&&init.headers)||{}, body } }); return nativeFetch(resource, init).then(res=>{ try{ const clone = res.clone && res.clone(); if(clone && clone.text){ return clone.text().then(text=>{ Recorder.add({ id, type:'fetch', method, url, status: res.status, duration: Date.now()-start, response:{ statusText: res.statusText, headers:(function(){ const h={}; try{ res.headers.forEach((v,k)=>h[k]=v);}catch(e){} return h; })(), body: text } }); return res; }).catch(()=>{ Recorder.add({ id, type:'fetch', method, url, status: res.status, duration: Date.now()-start }); return res; }); } else { Recorder.add({ id, type:'fetch', method, url, status: res.status, duration: Date.now()-start }); return res; } }catch(e){ Recorder.add({ id, type:'fetch', method, url, status: res.status, duration: Date.now()-start, error: String(e) }); return res; } }).catch(err=>{ Recorder.add({ id, type:'fetch', method, url, status:0, duration: Date.now()-start, error: String(err) }); throw err; }); }; }catch(e){ console.warn('fetch hook failed', e); } })();
  (function(){ try{ if(navigator.sendBeacon){ const native = navigator.sendBeacon.bind(navigator); navigator.sendBeacon = function(url,data){ const id = gen('beacon'); Recorder.add({ id, type:'beacon', method:'POST', url, startedDateTime: now(), request:{ body: data } }); return native(url,data); }; } }catch(e){} })();
  (function(){ try{ const NativeImage = window.Image; window.Image = function(){ const img = new NativeImage(); try{ Object.defineProperty(img, 'src', { set:function(v){ Recorder.add({ id: gen('img'), type:'image', method:'GET', url: v, startedDateTime: now() }); return HTMLImageElement.prototype.__lookupSetter__('src').call(img, v); }, get:function(){ return HTMLImageElement.prototype.__lookupGetter__('src').call(img); } }); }catch(e){} return img; }; }catch(e){} try{ const origCreate = document.createElement.bind(document); document.createElement = function(tag){ const el = origCreate(tag); try{ const lc = (''+tag).toLowerCase(); if(lc==='script'||lc==='img'||lc==='link'){ if(lc==='link'){ Object.defineProperty(el,'href',{ set:function(v){ Recorder.add({ id: gen('res'), type:'link', method:'GET', url: v, startedDateTime: now() }); return HTMLLinkElement.prototype.__lookupSetter__('href').call(el, v); }, get:function(){ return HTMLLinkElement.prototype.__lookupGetter__('href').call(el); } }); } else { Object.defineProperty(el,'src',{ set:function(v){ Recorder.add({ id: gen('res'), type:lc, method:'GET', url: v, startedDateTime: now() }); return HTMLImageElement.prototype.__lookupSetter__('src').call(el, v); }, get:function(){ return HTMLImageElement.prototype.__lookupGetter__('src').call(el); } }); } } }catch(e){} return el; }; }catch(e){} })();
  (function(){ try{ if(window.WebSocket){ const NativeWS = window.WebSocket; function HookedWS(url, protocols){ const ws = protocols ? new NativeWS(url, protocols) : new NativeWS(url); const id = gen('ws'); Recorder.add({ id, type:'websocket', url, startedDateTime: now() }); try{ const origSend = ws.send; ws.send = function(data){ Recorder.add({ id: gen('ws-send'), type:'websocket-send', parent: id, body: String(data), startedDateTime: now() }); return origSend.apply(ws, arguments); }; ws.addEventListener('message', ev=> Recorder.add({ id: gen('ws-recv'), type:'websocket-recv', parent: id, body: String(ev.data), startedDateTime: now() })); }catch(e){} return ws; } window.WebSocket = HookedWS; } }catch(e){} })();
  (function(){ try{ if(window.PerformanceObserver){ const po = new PerformanceObserver(list=> list.getEntries().forEach(ent=>{ if(ent.entryType==='resource') Recorder.add({ id: gen('rt'), type:'resource-timing', name: ent.name, initiatorType: ent.initiatorType, transferSize: ent.transferSize, duration: ent.duration, startedDateTime: now() }); })); po.observe({ entryTypes:['resource'] }); } }catch(e){} })();
  document.addEventListener('submit', function(e){ try{ const f = e.target; const fd = new FormData(f); const obj = {}; fd.forEach((v,k)=>{ if(obj[k]){ if(Array.isArray(obj[k])) obj[k].push(v); else obj[k]=[obj[k],v]; } else obj[k]=v; }); Recorder.add({ id: gen('form'), type:'form', method:(f.method||'GET').toUpperCase(), url:(f.action||location.href), startedDateTime: now(), request:{ form: obj } }); }catch(e){} }, true);
  function $(sel, root){ return (root||document).querySelector(sel); }
  function safeString(v){ try{ if(typeof v==='string') return v; if(v===null) return 'null'; if(v===undefined) return 'undefined'; if(typeof v==='object') return JSON.stringify(v); return String(v);}catch(e){return String(v);} }
  function buildPanel(){ if(document.getElementById(ID.panel)) return document.getElementById(ID.panel); const p = document.createElement('div'); p.id = ID.panel; p.innerHTML = `
<div class="header"><div style="display:flex;align-items:center;gap:8px"><strong>ErudaV2 by Rex</strong><div class="tabs" id="erudav2-tabs"><button data-panel="console" class="active">Console</button><button data-panel="network">Network</button><button data-panel="elements">Elements</button><button data-panel="storage">Storage</button><button data-panel="performance">Performance</button><button data-panel="sources">Sources</button></div></div><div style="display:flex;gap:8px;align-items:center"><button id="erudav2-close" class="erudav2-button">Close</button></div></div><div class="body"><div id="panel-console" class="panel active"><div class="log" id="erudav2-log"></div><div class="controls"><input id="erudav2-input" type="text" placeholder="Type JS and press Enter (use $_ for last)"><button id="erudav2-run" class="erudav2-button">Run</button></div></div><div id="panel-network" class="panel"><div style="display:flex;gap:8px;margin-bottom:8px;align-items:center"><button id="erudav2-net-clear" class="erudav2-button">Clear</button><button id="erudav2-har" class="erudav2-button">Export HAR</button><label style="color:var(--muted);font-size:12px"><input type="checkbox" id="erudav2-auto"> Auto</label><input id="erudav2-net-filter" type="text" placeholder="Filter URL/method" style="flex:1"></div><div class="list" id="erudav2-network-list"></div></div><div id="panel-elements" class="panel"><div style="margin-bottom:8px"><button id="erudav2-inspect" class="erudav2-button">Inspect</button></div><div class="list" id="erudav2-tree"></div></div><div id="panel-storage" class="panel"><div style="display:flex;gap:8px;margin-bottom:8px"><button data-store="local" class="erudav2-button store-btn active">Local</button><button data-store="session" class="erudav2-button store-btn">Session</button><button data-store="cookies" class="erudav2-button store-btn">Cookies</button></div><div class="list" id="erudav2-storage-list"></div></div><div id="panel-performance" class="panel"><div style="display:flex;gap:12px"><div>FPS: <span id="erudav2-fps">â€”</span></div><div>Mem: <span id="erudav2-mem">â€”</span></div></div><canvas id="erudav2-perf" width="400" height="60" style="margin-top:8px;width:100%"></canvas></div><div id="panel-sources" class="panel"><div class="list" id="erudav2-sources-list"></div><pre id="erudav2-sources-view" style="white-space:pre-wrap;max-height:40vh;overflow:auto;margin-top:8px;background:#07101a;padding:8px;border-radius:6px"></pre></div></div><div class="footer">ErudaV2 by Rex â€¢ Mobile v3</div>`; document.body.appendChild(p); const tabs = p.querySelectorAll('.tabs button'); const panels = p.querySelectorAll('.panel'); tabs.forEach(btn=> btn.addEventListener('click', function(){ tabs.forEach(t=>t.classList.remove('active')); btn.classList.add('active'); const sel = btn.getAttribute('data-panel'); panels.forEach(x=>x.classList.remove('active')); const target = p.querySelector('#panel-'+sel); if(target) target.classList.add('active'); })); p.querySelector('#erudav2-close').addEventListener('click', ()=>p.classList.remove('open')); return p; }
  function initConsole(panel){ const log = $('#erudav2-log', panel); const input = $('#erudav2-input', panel); const run = $('#erudav2-run', panel); function appendLine(txt, cls){ try{ const d=document.createElement('div'); d.className='line '+(cls||''); d.textContent='['+new Date().toLocaleTimeString()+'] '+txt; log.appendChild(d); log.scrollTop = log.scrollHeight; }catch(e){} } ['log','info','warn','error','debug'].forEach(level=>{ const orig = console[level].bind(console); console[level]=function(){ try{ appendLine(Array.from(arguments).map(a=>safeString(a)).join(' '), level==='warn'?'warn':level==='error'?'error':''); }catch(e){}; return orig.apply(console, arguments); }; }); run.addEventListener('click', runInput); input.addEventListener('keydown', function(e){ if(e.key==='Enter') runInput(); }); function runInput(){ const code = input.value.trim(); if(!code) return; try{ const res = eval(code); window.$_ = res; appendLine('=> ' + safeString(res)); }catch(err){ appendLine('Error: ' + err, 'error'); } input.value=''; } }
  function initNetworkUI(panel){ const list = $('#erudav2-network-list', panel); const filter = $('#erudav2-net-filter', panel); const netClear = $('#erudav2-net-clear', panel); const exportHar = $('#erudav2-har', panel); const autoChk = $('#erudav2-auto', panel); function render(rec){ try{ const row=document.createElement('div'); row.className='row'; row.dataset.id = rec.id; row.innerHTML = '<div style="font-weight:600">'+(rec.method||rec.type||'')+' '+(rec.url||rec.name||'')+'</div><div style="color:var(--muted);font-size:12px">'+(rec.status||'')+' â€¢ '+(rec.duration?rec.duration+'ms':'')+' â€¢ '+(rec.type||'')+'</div>'; row.addEventListener('click', function(){ showDetail(rec.id); panel.querySelectorAll('.row').forEach(x=>x.style.background=''); row.style.background='rgba(255,255,255,0.02)'; }); list.prepend(row); }catch(e){} } Recorder.on('add', function(r){ const f = (filter.value||'').trim().toLowerCase(); if(!f || (r.url && r.url.toLowerCase().includes(f)) || (r.method && r.method.toLowerCase().includes(f))) render(r); }); Recorder.on('clear', function(){ list.innerHTML=''; }); netClear.addEventListener('click', function(){ Recorder.clear(); }); exportHar.addEventListener('click', function(){ try{ const records = Recorder.all(); const har = { log:{ version:'1.2', creator:{ name:'ErudaV2 Mobile', version:'3.0' }, entries: records.map(r=>({ startedDateTime: r.startedDateTime||now(), time: r.duration||0, request:{ method: r.method||'GET', url: r.url||r.name||'' }, response:{ status: r.status||0 } })) } }; const blob = new Blob([JSON.stringify(har,null,2)],{type:'application/json'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='erudav2-mobile-v3.har'; a.click(); URL.revokeObjectURL(a.href); }catch(e){ alert('HAR export failed: '+e); } }); }
  function showDetail(id){ const rec = Recorder.all().find(r=>r.id===id); if(!rec) return alert('Record not found'); const w = window.open('','_blank'); w.document.title = 'ErudaV2 â€” '+id; const pre = w.document.createElement('pre'); pre.style.whiteSpace='pre-wrap'; pre.style.fontFamily='monospace'; pre.textContent = JSON.stringify(rec, null, 2); w.document.body.appendChild(pre); }
  function initElements(panel){ const tree = $('#erudav2-tree', panel); const btn = $('#erudav2-inspect', panel); let selecting=false, highlighted=null; btn.addEventListener('click', function(){ selecting=!selecting; btn.textContent = selecting ? 'Stop' : 'Inspect'; if(selecting) document.body.addEventListener('pointerdown', onPick, true); else document.body.removeEventListener('pointerdown', onPick, true); }); function onPick(e){ e.preventDefault(); e.stopPropagation(); selecting=false; btn.textContent='Inspect'; document.body.removeEventListener('pointerdown', onPick, true); const elmt = e.target; if(highlighted){ highlighted.style.outline = highlighted.__eruda_old_o || ''; delete highlighted.__eruda_old_o; } highlighted = elmt; highlighted.__eruda_old_o = highlighted.style.outline || ''; highlighted.style.outline = '3px solid rgba(31,143,255,0.95)'; showTree(elmt); } function showTree(rootEl){ tree.innerHTML=''; function nodeFor(e,depth){ const nd=document.createElement('div'); nd.className='row'; nd.textContent = '<'+e.tagName.toLowerCase() + (e.id?(' #' + e.id):'') + (e.className?(' .' + e.className.split(' ').join('.')):'') + '>'; nd.addEventListener('click', function(ev){ ev.stopPropagation(); if(highlighted){ highlighted.style.outline = highlighted.__eruda_old_o || ''; } highlighted = e; highlighted.__eruda_old_o = highlighted.style.outline || ''; highlighted.style.outline='3px solid rgba(31,143,255,0.95)'; }); if(depth>0 && e.children && e.children.length){ const sub=document.createElement('div'); sub.style.paddingLeft='10px'; Array.from(e.children).slice(0,30).forEach(c=> sub.appendChild(nodeFor(c, depth-1))); nd.appendChild(sub); } return nd; } tree.appendChild(nodeFor(rootEl,3)); } }
  function initStorage(panel){ const btns = panel.querySelectorAll('.store-btn'); const list = $('#erudav2-storage-list', panel); btns.forEach(b=> b.addEventListener('click', function(){ btns.forEach(x=>x.classList.remove('active')); b.classList.add('active'); showStore(b.getAttribute('data-store')); })); function showStore(kind){ list.innerHTML=''; if(kind==='local'){ for(let i=0;i<localStorage.length;i++){ const k=localStorage.key(i), v=localStorage.getItem(k); const r=document.createElement('div'); r.className='row'; r.textContent = k+' = '+v; list.appendChild(r); } } else if(kind==='session'){ for(let i=0;i<sessionStorage.length;i++){ const k=sessionStorage.key(i), v=sessionStorage.getItem(k); const r=document.createElement('div'); r.className='row'; r.textContent = k+' = '+v; list.appendChild(r); } } else if(kind==='cookies'){ const cookies = document.cookie.split(';').map(s=>s.trim()).filter(Boolean); cookies.forEach(c=>{ const r=document.createElement('div'); r.className='row'; r.textContent = c; list.appendChild(r); }); } } }
  function initPerformance(panel){ const fpsEl = $('#erudav2-fps', panel), memEl = $('#erudav2-mem', panel), canvas = $('#erudav2-perf', panel); const ctx = canvas.getContext('2d'); let last = performance.now(), frames=0; function tick(nowTime){ frames++; const dt = nowTime - last; if(dt>=500){ const fps = Math.round((frames/dt)*1000); fpsEl.textContent = fps; frames = 0; last = nowTime; ctx.clearRect(0,0,canvas.width,canvas.height); ctx.fillStyle='rgba(31,143,255,0.9)'; const h=Math.max(1, Math.min(canvas.height, fps)); ctx.fillRect(0, canvas.height-h, canvas.width, h); } if(performance && performance.memory) memEl.textContent = Math.round(performance.memory.usedJSHeapSize/1024/1024)+' MB'; else memEl.textContent='n/a'; requestAnimationFrame(tick); } requestAnimationFrame(tick); }
  function initSources(panel){ const list = $('#erudav2-sources-list', panel), view = $('#erudav2-sources-view', panel); list.innerHTML=''; view.textContent=''; Array.from(document.scripts).forEach((s, idx)=>{ const item = document.createElement('div'); item.className='row'; item.textContent = s.src ? 'script: ' + s.src : 'inline #' + (idx+1); item.addEventListener('click', async function(){ list.querySelectorAll('.selected').forEach(n=>n.classList.remove('selected')); item.classList.add('selected'); let content=''; if(s.src){ try{ const res = await fetch(s.src, { cache: 'no-store' }); content = await res.text(); }catch(e){ content = 'Could not fetch: '+e; } } else content = s.textContent; view.textContent = content; }); list.appendChild(item); }); }
  function makeGearDraggable(gear){ let dragging=false, startX=0, startY=0, origRight=14, origBottom=14; function onDown(e){ dragging=true; startX = e.touches ? e.touches[0].clientX : e.clientX; startY = e.touches ? e.touches[0].clientY : e.clientY; const rect=gear.getBoundingClientRect(); origRight = window.innerWidth - rect.right; origBottom = window.innerHeight - rect.bottom; gear.style.transition='none'; window.addEventListener('pointermove', onMove, {passive:false}); window.addEventListener('pointerup', onUp); } function onMove(e){ if(!dragging) return; e.preventDefault(); const cx = e.touches ? e.touches[0].clientX : e.clientX; const cy = e.touches ? e.touches[0].clientY : e.clientY; const dx = cx - startX; const dy = cy - startY; let right = origRight - dx; let bottom = origBottom - dy; right = Math.max(6, Math.min(window.innerWidth - 46, right)); bottom = Math.max(6, Math.min(window.innerHeight - 46, bottom)); gear.style.right = right + 'px'; gear.style.bottom = bottom + 'px'; } function onUp(){ dragging=false; gear.style.transition=''; window.removeEventListener('pointermove', onMove); window.removeEventListener('pointerup', onUp); } gear.addEventListener('pointerdown', onDown, {passive:false}); gear.addEventListener('touchstart', onDown, {passive:false}); }
  const gear = (function(){ const existing = document.getElementById(ID.gear); if(existing) return existing; const el = document.createElement('div'); el.id = ID.gear; el.innerHTML = '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="white" d="M12 15.5A3.5 3.5 0 1 0 12 8.5a3.5 3.5 0 0 0 0 7z"/><path fill="rgba(0,0,0,0.12)" d="M19.4 13.4a7.9 7.9 0 0 0 .1-2.8l2-1.6-2-3.4-2.4.5a8.2 8.2 0 0 0-1.7-1L14.7 1h-5.4L8.8 4.1a8.2 8.2 0 0 0-1.7 1L4.8 4.6 2.8 8l2 1.6a7.9 7.9 0 0 0 .1 2.8l-2 1.6 2 3.4 2.4-.5c.5.6 1.1 1.1 1.7 1L9.3 23h5.4l.6-3.1c.6-.1 1.2-.5 1.7-1l2.4.5 2-3.4-2-1.6z"/></svg>'; document.body.appendChild(el); makeGearDraggable(el); return el; })();
  let panel = null; function openPanel(){ if(!panel) panel = buildPanel(); if(!panel.__eruda_inited){ initConsole(panel); initNetworkUI(panel); initElements(panel); initStorage(panel); initPerformance(panel); initSources(panel); panel.__eruda_inited = true; } panel.classList.add('open'); } function togglePanel(){ if(!panel) openPanel(); else panel.classList.toggle('open'); } gear.addEventListener('click', function(){ togglePanel(); }); try{ if(location.search.indexOf('debug=true') !== -1) openPanel(); }catch(e){}; Recorder.on('add', function(rec){ try{ const panelEl = document.getElementById(ID.panel); if(!panelEl) return; const auto = panelEl.querySelector('#erudav2-auto'); if(auto && auto.checked) panelEl.classList.add('open'); }catch(e){} }); window.ErudaV2Mobile = { open: openPanel, close: ()=>{ if(panel) panel.classList.remove('open'); }, toggle: togglePanel, recorder: Recorder }; console.log('ErudaV2 Mobile v3 injected â€” bottom drawer + draggable gear. Use ErudaV2Mobile.toggle()');
})();
